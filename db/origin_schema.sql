CREATE TABLE "users" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "nickname" varchar(100) UNIQUE NOT NULL,
  "email" varchar(100) UNIQUE NOT NULL,
  "password" varchar(100) NOT NULL,
  "created_at" timestamp NOT NULL DEFAULT (now()),
  "role" varchar(10) DEFAULT '',
  "profile_description" varchar(500)
);

CREATE TABLE "posts" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "users_id" integer NOT NULL,
  "title" varchar(300) NOT NULL,
  "content" varchar(6000) NOT NULL,
  "content_slate" varchar(6000),
  "cate_id" integer,
  "created_at" timestamp NOT NULL DEFAULT (now()),
  "updated_at" timestamp NOT NULL DEFAULT (now()),
  "status_id" integer DEFAULT 1,
  "visibility_id" integer DEFAULT 1
);

CREATE TABLE "temp_posts" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "users_id" integer NOT NULL,
  "post_id" integer NOT NULL,
  "title" varchar(300) NOT NULL,
  "content" varchar(6000) NOT NULL,
  "content_slate" varchar(6000),
  "created_at" timestamp NOT NULL DEFAULT (now()),
  "updated_at" timestamp NOT NULL DEFAULT (now())
);

CREATE TABLE "categories" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "parent_cate_id" integer,
  "pos" integer,
  "users_id" integer,
  "category_name" varchar(150) NOT NULL,
  "depth" integer DEFAULT 0,
  "post_count" integer DEFAULT 0,
  "temp_post_count" integer DEFAULT 0
);

CREATE TABLE "comments" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "posts_id" integer,
  "users_id" integer,
  "content" varchar(1000) NOT NULL,
  "created_at" timestamp NOT NULL DEFAULT (now()),
  "updated_at" timestamp NOT NULL DEFAULT (now())
);

CREATE TABLE "user_files" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id" integer NOT NULL,
  "original_filename" varchar(255) NOT NULL,
  "stored_filename" varchar(255) NOT NULL,
  "file_size" bigint NOT NULL,
  "mime_type" varchar(100),
  "created_at" timestamp NOT NULL DEFAULT (now()),
  "file_path" varchar(1000) NOT NULL,
  "is_profile_image" boolean NOT NULL DEFAULT false,
  "pending_deletion" boolean NOT NULL DEFAULT false
);

CREATE TABLE "post_statuses" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "status_name" varchar(20) UNIQUE NOT NULL
);

CREATE TABLE "visibility_levels" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "level_name" varchar(20) UNIQUE NOT NULL
);

CREATE TABLE "post_images" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "post_id" integer,
  "is_thumbnail" boolean NOT NULL DEFAULT false,
  "original_filename" varchar(255) NOT NULL,
  "stored_filename" varchar(255) NOT NULL,
  "file_size" bigint NOT NULL,
  "mime_type" varchar(100),
  "created_at" timestamp NOT NULL DEFAULT (now()),
  "file_path" varchar(1000) NOT NULL
);

CREATE TABLE "post_files" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "post_id" integer,
  "original_filename" varchar(255) NOT NULL,
  "stored_filename" varchar(255) NOT NULL,
  "file_size" bigint NOT NULL,
  "mime_type" varchar(100),
  "created_at" timestamp NOT NULL DEFAULT (now()),
  "file_path" varchar(1000) NOT NULL,
  "pending_deletion" boolean NOT NULL DEFAULT false
);

CREATE INDEX ON "posts" ("cate_id");

COMMENT ON COLUMN "users"."profile_description" IS '사용자 프로필 소개';

COMMENT ON COLUMN "posts"."status_id" IS '1: 임시글, 2: 등록글, 3: 미등록';

COMMENT ON COLUMN "posts"."visibility_id" IS '1: 비밀글, 2: 비공개글';

ALTER TABLE "posts" ADD FOREIGN KEY ("users_id") REFERENCES "users" ("id");

ALTER TABLE "posts" ADD FOREIGN KEY ("cate_id") REFERENCES "categories" ("id");

ALTER TABLE "posts" ADD FOREIGN KEY ("status_id") REFERENCES "post_statuses" ("id");

ALTER TABLE "posts" ADD FOREIGN KEY ("visibility_id") REFERENCES "visibility_levels" ("id");

ALTER TABLE "temp_posts" ADD FOREIGN KEY ("users_id") REFERENCES "users" ("id");

ALTER TABLE "posts" ADD FOREIGN KEY ("id") REFERENCES "temp_posts" ("post_id") ON DELETE CASCADE;

ALTER TABLE "categories" ADD FOREIGN KEY ("parent_cate_id") REFERENCES "categories" ("id");

ALTER TABLE "categories" ADD FOREIGN KEY ("users_id") REFERENCES "users" ("id");

ALTER TABLE "user_files" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id");

ALTER TABLE "post_images" ADD FOREIGN KEY ("post_id") REFERENCES "posts" ("id") ON DELETE SET NULL;

ALTER TABLE "post_files" ADD FOREIGN KEY ("post_id") REFERENCES "posts" ("id") ON DELETE SET NULL;

ALTER TABLE "comments" ADD FOREIGN KEY ("posts_id") REFERENCES "posts" ("id") ON DELETE SET NULL;

ALTER TABLE "comments" ADD FOREIGN KEY ("users_id") REFERENCES "users" ("id") ON DELETE SET NULL;
